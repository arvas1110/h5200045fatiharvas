[{
		"ProgramlamaDili": "C",
		"Tasarimci": "Dennis Ritchie",
		"CikisTarihi": "1972",
		"Detay": "C dilinin temelleri Martin Richards tarafından geliştirilen BCPL adlı dil ile atılmıştır. Sonra, BCPL dilinden esinlenerek, Ken Thompson B adlı dili oluşturmuştur. B dili, C dilinin oluşturulmasında bir basamak olarak kullanılmıştır. Daha sonra ise, C dili Brian Kernighan ve Dennis Ritchie tarafından geliştirilmiştir. C dili içinde kullanılan standartlar 1983 yılına kadar, yine Brian Kernighan ve Dennis Ritchie tarafından yazılan The C Programming Language adlı kitapta belirlendiği şekilde uygulanmıştır. Zamanla daha yaygın bir şekilde kullanılmaya başlayan C için gereksinim duyulan yeni standartları belirlemek amacıyla 1983 yılında toplanan bir komite, ANSI C standartları adı verilen standartları oluşturmuştur. Burada kullanılan ANSI kelimesi 'American National Standart Institute' kelimelerinin kısaltılmış şeklidir. 1983 yılından itibaren, C programlama dili için bütün dünyada ANSI C standartları uygulanmaya başlamıştır.Günümüzde C dilinin bu sürümü ANSI C veya C89 adı ile anılır. ANSI C standartlarının belirlenmesinden sonra, piyasaya sürülen bütün C derleyicileri bu özelliği sağlayacak şekilde hazırlanmıştır. 1990 yılında, ANSI C ISO (International Organization for Standardization) tarafından, birkaç küçük değişiklik yapılarak, ISO/IEC 9899:1990 adıyla yeniden uyarlandı. Bu sürüm C90 adıyla anılmaktadır. 2000 yılında ise, ANSI ISO/IEC 9899:1990 standardını yeniden uyarlayarak C99 adı verilen bir standart yayınladı. 08.12.2011 tarihinde yayınlanan C11 standartları ile C Programlama diline ve kütüphanesine yeni özellikler eklenmiştir. Bu sürümle C++ Programlama Dili ile uyumluluk geliştirilmiştir. C programlama dilinin günümüzde kullanılmakta olan en son standart şeklidir. Haziran 2018 tarihinde yayınlanan C17 C Programlama dilinin aktif standardıdır. Bu standart yeni özellikler eklememiş, sadece C11'deki hatalara ilişkin teknik düzeltmeler ve açıklamalar getirmiştir. Assembler yoluyla Assembly dilinde yazılmış kodları makine kodlarına çevirerek kullanabiliriz. Ancak, Assembly dilinde kod yazarak programlama yapmak zor olduğu ve uzun bir uğraş gerektirdiği için, günümüzde kullanılmakta olan yüksek seviyeli diller (Basic, Fortran, Pascal gibi) oluşturulmuştur. Yüksek seviyeli diller program yapma işlemini daha kolay ve hızlı bir hale getirmiştir. Ancak, bu kez yapılan programların etkinliği azalmıştır. C dili, Assembly dilinin gücü ile yüksek seviyeli dillerin hızlı ve kolay programlama yapabilme özelliğini birleştirerek, kullanıcılar için oldukça pratik bir ortam sağladığından, her geçen gün biraz daha rağbet görmüştür.",
		"KucukLogoUrl": "https://raw.githubusercontent.com/arvas1110/h5200045fatiharvas/main/c.png",
		"BuyukResimUrl": "https://raw.githubusercontent.com/arvas1110/h5200045fatiharvas/main/cbackground.png"

	},
	{
		"ProgramlamaDili": "C++",
		"Tasarimci": "Bjarne Stroustrup",
		"CikisTarihi": "1983",
		"Detay": "C++ 1979 yılından itibaren Bjarne Stroustrup tarafından geliştirilen genel amaçlı, orta seviyeli, Nesne Yönelimli Programlama, Generic Programlama gibi programlama yöntemlerine imkan veren bir programlama dilidir. Programlama dili ilk olarak C with Classess olarak adlandırılmış 1983 yılında C++ olarak değiştirilmiştir. C++ C dilinden türemiştir bundan dolayı her C programı bir C++ programı olarak ifade edilir. C++ programlama dilini C dilinden ayıran en önemli özelliği Nesne Yönelimli Programlama yapmaya imkan vermesidir. Bu özelliği sayesinde Nesne Yönelimli Programlamada yer alan kapsülleme, çok biçimlilik, kalıtım gibi imkanlara sahiptir. Programlama dilleri donanıma müdahelesine göre düşük, orta ve yüksek seviyeli olarak adlandırılır. C++ dili C programlama dilinin devamı niteliğinden olduğundan ve bellek yönetimi yapmaya imkan verdiğinden orta seviyeli programlama dilidir. C++ nerelerde kullanılır C++ dilinin orta seviyeli bir dil olmasından dolayı diğer yüksek seviyeli programlama dillerinden gerekli optimizasyon yapıldığında daha performanslı olduğu söylenebilir. Ayrıca NYP desteği sayesinde modern programlamaya imkan vermesinden dolayı Sürücü yazılımları, Oyun, Görüntü işleme, İşletim sistemleri gibi hızın önemli olduğu yerlerde kullanılır. OpenCV görüntü işleme kütüphanesi ilk olarak C ile geliştirilmiş daha sonra C++ ile geliştirilmeye devam etmektedir. Unity ve bir çok oyun motoru C++ ile geliştirilmiştir. TensorFlow, Apache MXNet gibi Yapay Zeka araçları da C++ ile geliştirilmiştir. Chrome tarayıcısı ve Chrome, Node.js V8 JavaScript moturu C++ ile geliştirilmiştir. Benzer şekilde bir çok programlama diline ait derleyici yine C++ ile geliştirilmiştir.",
		"KucukLogoUrl": "https://raw.githubusercontent.com/arvas1110/h5200045fatiharvas/main/cplus.png",
		"BuyukResimUrl": "https://raw.githubusercontent.com/arvas1110/h5200045fatiharvas/main/cplusbackground.png"

	},
	{
		"ProgramlamaDili": "C#",
		"Tasarimci": "Microsoft",
		"CikisTarihi": "2000",
		"Detay": "C# Nedir C#, kısaca tanımlamak gerekirse, çok çeşitli işleri gerçekleştirmek için kullanılabilen modern, genel amaçlı bir programlama dilidir. Microsoft tarafından yaratıldığı için C#, öncelikle Windows .NET frameworkü ile tam uyumludur. Fakat günümüzde birçok farklı platformlarda da uygulanabilir. Bu oldukça çok yönlü dil, Nesne yönelimli Programlama Dili (OOP - Object Oriented Programming) olduğundan, kullanımı kolay, güvenilir ve yönetilmesi kolaydır.C# 'ın Kısa Tarihi C# 'ın ilk versiyonu, 3 yıllık bir çalışmanın sonunda 2002 yılında Microsoft'un .NET platformunun (framework - yazılım çatısı) bir parçası olması için Danimarkalı bir yazılım mühendisi olan Anders Hejlsberg ve ekibi tarafından tasarlanmış ve geliştirilmiştir. Hejlsberg, daha öncesinde Turbo Pascal, Delphi, Visual J++' nın tasarımında da yer almıştır. 1999 yılında proje başladığında dile Cool (C-like Object Oriented Language - C benzeri Nesne Yönelimli Dil) adı verilmiştir. Fakat daha sonra telif hakları sebebiyle ismi C# (C Sharp) olarak değiştirilmiştir. # (Sharp - Keskin) işareti, müzik te kullanılan bir semboldür. Müzik perdesinde yarım ton daha yüksek nota anlamına gelir. Bu sembolün konulma sebebi C++ programlama diline göndermedir. C++ dilindeki '++' ifadesi yazılımda değişkenin kendisine söylenen işlemden sonra bir arttırılması anlamına gelir. Bu yüzden C++ programlama diline verilen ad, C dilinin bir ileri versiyonu olduğunu belirtmek amacıyla yapılan bir gönderme şeklindedir. # ise dikkatli bakılırsa iki satır halinde '++' ifadesini barındırır. Bu yüzden C# dilinin, C++ 'ın bir ileri versiyonu olduğu (müzik ve kodlama sembolleriyle) ima edilmektedir. Dil ilk kez yayınlandığında, ondan yaklaşık 5 yıl daha yaşlı olan Java'nın yaratıcısı James Gosling, bu dili Java'nın bir taklidi olarak suçlamıştır. Ayrıca çeşitli programlama dillerinde kitabı olan yazarlar, dilin hiçbir yenilik getirmediği ve Java'yı tekrarladığını belirtmiştir. Fakat dili yaratan ekip bunu red ederek dilin Java 'dan farklı olduğunu belirtmiş, C++ ile daha fazla ortak noktası olduğunu söylemiştir. İşin aslı, Microsoft 1999-2002 yılları arasında bu programlama dilini kendi kullanımları için yaratmıştır. Başlangıçta C#, Java Script ile birlikte kullanılan Java programlama diline yanıt olarak Visual Studio 2002 (IDE - Program Geliştirme Platformu) ile birlikte yayınlanan bir programlama diliydi. Hem C# hem de Java, kişisel bilgisayarların (PC) yaygınlaşması ile kullanılmaya başlanan programların yazılması üzerine rekabet halindeydi. Bu 2 programlama dili, C# farklı bir tarafa yönelmeden (v2.0 ve sonrası) önce birbirlerinden büyük ölçüde esinlendiler. Birkaç yıl sonra dilin 2.0 versiyonu piyasaya sürüldüğünde, Java ve C# dillerinin birbiri ile olan farklılıkları daha net bir şekilde ortaya çıkmıştır.",
		"KucukLogoUrl": "https://raw.githubusercontent.com/arvas1110/h5200045fatiharvas/main/csharp.png",
		"BuyukResimUrl": "https://raw.githubusercontent.com/arvas1110/h5200045fatiharvas/main/csharpbackground.png"

	},
	{
		"ProgramlamaDili": "Python",
		"Tasarimci": "Guido van Rossum",
		"CikisTarihi": "1990",
		"Detay": "Python esas olarak nesne tabanlı programlamayı, belli bir oranda da fonksiyonel programlamayı destekleyen genel amaçlı bir programlama dilidir. 1991 yılında ilk sürümü geliştirilen Python görece kolaylığı, geniş standart kütüphanesi ve dinamik yapısı nedeniyle günümüzde oldukça popülerleşmiş ve yaygın bir kullanıcı kitlesine ulaşmıştır. Özellikle bilimsel ve hesaplamalı mühendislik konularında sıkça tercih edilen Python programlama dili, 2000’li yıllardan itibaren yaşanan donanımsal ve yazılımsal gelişmeler ile paralel olarak  geniş bir kullanım alanına kavuşmuştur. Python gibi yorumlanan diller yüksek seviyede veri yapıları kullandığından hafızada çok yer tutar ancak günümüzde yüksek bellek seviyelerine ulaşmak kolay olduğundan, bu durum önemli bir olumsuzluk olmaktan çıkmıştır. Yazılımsal açıdan ise internet ile beraber gelen açık kaynak kod ve özgür yazılım akımının yaygınlık kazanması, geliştiricilerin İnternet üzerinden ve geliştirilen araçlar aracılığıyla eş-güdümlü çalışmalarını beraberinde getirmiştir. Bu durum da yine Python kullanımının artmasının önemli nedenlerinden biridir. Özgür ve açık kaynak kod mantığına dayanan Python’ın standart kütüphanesi, geliştirme araçları ve diğer birçok kütüphane, lisansa gerek duyulmaksızın açık kaynak kod olarak ücretsiz şekilde indirilebilmektedir. Öte yandan basitliğinin ve yorumlanan bir dil olmasının  getirdiği bazı avantajlar vardır: ilk olarak yorumlayıcı üzerinde etkileşimli olarak çalışılabildiğinden dilin yeni kütüphanelerini öğrenmek ve keşif yapmak görece kolaydır. İkinci avantajı, yeni bir program yazılırken hızlıca deneme yapmaya olanak vermesidir. Son olarak da hesaplamaları adım adım görmeye ve eldeki problemin şekillenişini verimli şekilde takip etmeye izin vermesidir.",
		"KucukLogoUrl": "https://raw.githubusercontent.com/arvas1110/h5200045fatiharvas/main/python.png",
		"BuyukResimUrl": "https://raw.githubusercontent.com/arvas1110/h5200045fatiharvas/main/pythonbackground.png"

	},
	{
		"ProgramlamaDili": "Java",
		"Tasarimci": "James Gosling",
		"CikisTarihi": "1995",
		"Detay": "İlk bilgisayarlar ortaya çıktığında, şimdi kullandığımız FORTRAN, COBOL, Pascal, C/C++, Java gibi üst düzey diller yoktu. Farklı makinelerin donanım yapıları farklı olduğu için, farklı marka ve model bilgisayarların makine dilleri (makinelerin anladığı tek dil) birbirlerinden farklı idi. O nedenle, ilk programcılar, bilgisayara, ancak kullandıkları makinenin  makine dili ile iş yaptırabiliyorlardı. Makine dilini öğrenmek zor olmak yanında, bir makine için öğrenilen makine dili, farklı marka ve modeller için geçerli olmuyordu. Bu zorluğu aşmak için önce assembler dili ve hemen arkasından üst düzey diller ortaya çıktı. Üst düzey diller, programcılara büyük rahatlık getirdi. Çünkü, programcı, işletim sistemini ve makineyi düşünmeden, kaynak programını istediği dille yazabiliyordu. Örneğin, C ile yazılan bir kaynak programı, uygun derleyici ile her işletim sisteminde ve her makinede derlenip çalıştırılabiliyordu. [Tabii, C derleyicisi yazan farklı şirketlerin standarttan ufak sapmalarını göz ardı ediyoruz.]  Şimdi adına prosedürel diller denilen FORTRAN, COBOL, Pascal, Modula, C gibi üst düzey diller uzun yıllar programcılara başarıyla hizmet ettiler; halen de etmektedirler. Ama ortada bir problem vardı. Belirli bir işletim sistemi altında çalışan belirli tür bir makinede derlenen bir kaynak program, ancak o işletim sistemi altında çalışan o tür makinelerde koşturulabiliyordu. İşletim sistemi ve/veya makine türü değişince; yani platform değişince, program orada koşamıyordu; yeni platforma uygun bir derleyici ile yeniden derlenmesi gerekiyordu. Buna, kısaca platform bağımlılık diyoruz. Platform bağımlılıktan kastettiğimiz şey, bir kaynak programın belirli bir işletim sistemi altında çalışan belirli bir derleyici ile derlendiği ve ancak belirli bilgisayar türlerinde koşturulabildiği gerçeğidir. Örneğin, Windows işletim sistemi altında çalışan bir PC de derlenen bir bilgisayar programını  Macintosh ya da Linux işletim sistemi altında çalışan bir makinede koşturmak mümkün değildir. Piyasaya farklı işletim sistemlerinin ve çok sayıda farklı donanımın çıkması, bilgisayar ağlarının gelişmesi, bir ağa bağlı makinelerin farklı işletim sistemleri altında çalışan farklı marka ve model bilgisayarlardan oluşuyor olması problemi büyüttü. Problemin çözümü, platformdan bağımsız çalışabilecek bir dilin yaratılmasını gerektiriyordu. Bu iş, Sun firmasının geliştirdiği Java dili ile çözüldü. Gerçi Sun firması, ortaya çıkan bu büyük problemi çözmek için değil, daha basit bir amaçla yola çıktı. Elektrikli ev aletlerinin kolay kullanılmasını sağlayacak bir dil geliştirmek istiyordu. Kısa zamanda, bu işin ancak ortak bir platformda yapılabileceğini anladı. Sun’ın programcısı James Gosling, 1995 yılında her platformda çalışan Java dilini yarattı. Gosling basit ama harika bir buluş yaptı. Farklı işletim sistemleri ve farklı donanımlarda kurulabilen ortak bir sanal makine tasarladı. Adına JVM (Java Virtual Machine) denilen bu sanal makine ücretsiz dağıtıldı. JVM her platforma kolayca kurulabilir. Java dili ile yazılan kaynak programlar, java derleyicisi ile JVM de çalışabilen bir tür makine diline dönüştürülür. Adına java byte kod denilen bu program JVM tarafından yorumlanır ve çalıştırılır. Java byte kod bir bakıma, prosedürel dillerde yazılıp derlenmiş kaynak programların işlevini yapar. Java uygulamalarını çalıştırmak isteyen herkes, kendi makinesine JVM ‘i kurabilir. Bunun için JRE (Java Runtime Environment) adlı programı internetten indirip yüklemesi yetecektir. JRE bilgisayara bir kez yüklenir. Ondan sonra Java uygulamalarının hepsi bu makinede çalışabilir. Makinede bir java uygulaması çalışacağı zaman, JRE kendiliğinden JVM sanal makinesini oluşturur. JVM gerektiğinde çalışan bir programdır; her program gibi, işi bitince ana bellekten silinir. Dolayısıyla makineye bir zarar vermesi söz konusu değildir. Günümüzde, java uygulamaları ile karşılaşan tarayıcıların çoğu, JRE’yi otomatik olarak indirip yükleme yeteneğine sahiptir.    Java basit, modern, nesne yönelimli, tip-korumalı ve C ile C++ dillerinin iyi özeliklerini almış bir dildir. Fazla olarak, her platformda çalışabilme yeteneğine sahiptir. Bu yetenek, onu yalnız bilgisayarlarda değil, internet uygulamalarına, cep telefonlarına, oyun makinelerine, ev aletlerine kadar geniş bir yelpazede uygulama alanı bulmasını sağladı. Bu nedenle, Java’yı hem programlama dili, hem de bir ortam olarak düşünebiliriz. Bu ortamda işletim sistemi, ağlar, internet programlama, veritabanı ve bütün orta katman (middleware) teknolojileri yer alır. Özetle, Java basit bir dildir. Kolay öğrenilir. Genel amaçlı bir dilin bütün hünerlerine sahiptir. C, C++ dillerinin iyi özeliklerini almıştır. Kullanıcı dostu ve hızlı bir uygulama geliştirme  aracıdır.",
		"KucukLogoUrl": "https://raw.githubusercontent.com/arvas1110/h5200045fatiharvas/main/java.png",
		"BuyukResimUrl": "https://raw.githubusercontent.com/arvas1110/h5200045fatiharvas/main/javabackground.png"

	},
	{
		"ProgramlamaDili": "Kotlin",
		"Tasarimci": "JetBrains",
		"CikisTarihi": "2011",
		"Detay": "2010 yılında Rusya’da bulunan JetBrains adlı şirket tarafından geliştirilmeye başlanmıştır. Kotlin adını Rusya’da bulunan Kotlin isimli bir adadan almaktadır. Apache 2.0 lisansına sahip açık kaynak kodlu bir projedir. Kotlin kaynak kodları herkese açıktır. Geliştiriciler tarafından desteklenebilir. Kotlin açık kaynak kodlarına buradan ulaşabilirsiniz.  Kotlin, Java Sanal Makinesi üzerinde çalışan statik ve nesne yönelimli bir programlama dilidir. Java ile Kotlin bir arada çalışabilmektedir. Kotlin kodları içinde Java’yı ve Java kodları içinde Kotlin’i kolay bir şekilde kullanabilirsiniz. Kotlin çıktığında bir çok geliştiricinin aklında Java varken neden bu dile gerek duyuldu? Neden Kotlin? gibi birçok geliştirici tarafından sorulmuş olan bu sorulara cevap olarak JetBrains firması ; “Performans ve güvenliği feda etmeden Java’dan daha özlü kodlar yazmayı sağlamak için bu dili geliştirdik” cevabını vermektedir. Yani Kotlin Java’ya göre daha az kod satırı yazmayı hedeflemektedir. Kotlin Java’yı bitirmiş değildir. Java kodları ile tamamen birlikte çalıştığı için geliştiriciler Java’dan Kotlin’e koalay bir şekilde geçiş yapabiliyorlar. İlk yıllarında fazla ilgi göremeyen Kotlin 2017 yılında Google desteğini alarak daha fazla ilgi görmeye başladı. Google 2019 yılında Kotlin programlama dilinin Android uygulama geliştiricileri tarafından tercih edilen bir dil olduğunu ve Android platformu için Kotlin’i destekleyeceğini duyurdu. Google, bu duyuruda “Android geliştirme giderek daha fazla Kotlin’e dönüşecek” diyor. Birçok yeni Jetpack API’si ve özelliği ilk olarak Kotlin’de sunulacak. Yeni bir projeye başlıyorsanız, Kotlin’de yazmalısınız; Kotlin’de yazılan kod genellikle sizin için çok daha az kod anlamına gelir; yazılması, test edilmesi ve bakımı için daha az kod.” diye ekledi.",
		"KucukLogoUrl": "https://raw.githubusercontent.com/arvas1110/h5200045fatiharvas/main/kotlin.png",
		"BuyukResimUrl": "https://raw.githubusercontent.com/arvas1110/h5200045fatiharvas/main/kotlinbackground.png"

	},
	{
		"ProgramlamaDili": "Swift",
		"Tasarimci": "Chris Lattner, Apple",
		"CikisTarihi": "2014",
		"Detay": "Swift dilinin geliştirilmesi, Chris Lattner ve birçok Apple yazılımcısının işbirliği ile 2010 yılında başlamıştır. Swift Objective-C, Rust, Haskell, Ruby, Python, C#, CLU gibi birçok programlama dilinden esinlenilerek yazılmıştır. 2 Haziran 2014'te Swift ile yazılmış ilk WWDC uygulaması tanıtıldı. Dilin beta sürümü konferansa katılan kayıtlı Apple geliştiricilerine tanıtıldı fakat şirket Swift'in test sürümüyle son sürümünün kaynak uyumluluğunun sözünü vermedi. Apple gerektiği durumda nihai sürüm için bir kaynak kod dönüştürücü yapmayı planlamaktadır. 500 sayfalık ve ücretsiz Swift Programming Language el kitabı WWDC’de yayınlandı. Kitap iBooks Store ve resmi web sayfasından ulaşılabilir durumda. Swift ilk olarak iOS için olan Xcode 6.0’ın Gold Master versiyonuyla 1.0 milestone sürümünü 9 Eylül 2014 tarihinde çıkardı. Swift 1.1 versiyonu Xcode 6.1 güncellemesiyle beraber 22 Ekim 2014 tarihinde geldi. Swift 1.2 versiyonu 8 Nisan 2015 tarihinde Xcode 6.3 güncellemesiyle geldi. Swift 2.0 WWDC 2015 tarihinde tanıtıldı ve 21 Eylül tarihi itibarıyla App Store’a bu dil ile yazılmış uygulamaların gönderilebileceği duyuruldu. Swift 3.0 versiyonu ise 13 Eylül 2016 tarihinde geldi. Swift Stack Overflow Developer Survey 2015'in En Çok Sevilen Programlama Dili kategorisinde birinci sırayı, 2016 tarihinde ise ikinci sırayı kazandı. WWDC 2016’da Apple, Swift ile kodlama nasıl öğretilir amacını taşıyan iPad özel uygulaması olan Swift Playgrounds’u tanıttı. Belirli sırada yerleştirilmiş ve çalıştırılan kodlar ile geri bildirim sağlayan bu uygulama 3 boyutlu video oyununu andıran bir arayüz içinde sunuldu. 2017 tarihinde Chris Lattner Apple içerinde Tesla Motors’da yeni bir pozisyona geçtiğini duyurdu ve Swift projesindeki rolünü Ted Kremenek üstlendi.",
		"KucukLogoUrl": "https://raw.githubusercontent.com/arvas1110/h5200045fatiharvas/main/swift.png",
		"BuyukResimUrl": "https://raw.githubusercontent.com/arvas1110/h5200045fatiharvas/main/swiftbackground.png"

	},
	{
		"ProgramlamaDili": "JavaScript",
		"Tasarimci": "Brendan Eich",
		"CikisTarihi": "1995",
		"Detay": "JavaScript, yaygın olarak web tarayıcılarında kullanılmakta olan dinamik bir programlama dilidir. JavaScript ile yazılan istemci tarafı betikler sayesinde tarayıcının kullanıcıyla etkileşimde bulunması, tarayıcının kontrol edilmesi, asenkron bir şekilde sunucu ile iletişime geçilmesi ve web sayfası içeriğinin değiştirilmesi gibi işlevler sağlanır. JavaScript, Node.js gibi platformlar sayesinde sunucu tarafında da yaygın olarak kullanılmaktadır. JavaScript prototip-tabanlı, dinamik türlere ve birinci-sınıf fonksiyonlara sahip bir betik dilidir. Nesne yönelimli, imperatif ve fonksiyonel programlama prensiplerine sahiptir. JavaScript ve Java arasında; isimleri, yazım şekli ve standart kütüphanelerindeki benzerlikler dışında bir bağlantı yoktur ve iki dilin semantikleri çok farklıdır. JavaScript'in yazım şekli C programlama dilinden türetilmiş, semantiği ve tasarımı ise Self ve Scheme programlama dillerinden esinlenmiştir. JavaScript, ECMAScript belirtimleri ile standartlaştırılmıştır.",
		"KucukLogoUrl": "https://raw.githubusercontent.com/arvas1110/h5200045fatiharvas/main/javacript.png",
		"BuyukResimUrl": "https://raw.githubusercontent.com/arvas1110/h5200045fatiharvas/main/javascriptbackground.png"

	}

]
